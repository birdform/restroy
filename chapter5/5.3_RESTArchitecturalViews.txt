5.3 RESTアーキテクチャビュー

RESTアーキテクチャ要素の理解が分断されているので、要素が構造を形成するためにどのようにはたらくかを説明するために、アーキテクチャビュー［105］を使用します。3つのタイプのビュー――プロセス、コネクタ、およびデータ――は、RESTの設計原理を照らし出す上で役に立ちます。

5.3.1 プロセスビュー

アーキテクチャのプロセスビューは、システムを流れるデータの経路を明らかにすることによって、コンポーネントの相互作用関係を導き出すという点で、主に有効です。残念ながら、通常、実際のシステムの相互作用は、詳細によって覆い隠された全体図に行き着く大規模な数のコンポーネントにかかわります。図5-10では、RESTベースアーキテクチャから、3つの並行リクエストを処理する間の特定インスタンスでのプロセスビューの例を提供します。

図5-10: RESTベースアーキテクチャのプロセスビュー

RESTにおけるクライアント・サーバの関心事の分離は、コンポーネントの実装を簡素化し、コネクタ意味論の複雑さを減少させて、パフォーマンスチューニングの有効性を向上させるとともに、純粋なサーバコンポーネントのスケーラビリティを増強します。レイヤー構造の制約は、仲介役（プロキシ、ゲートウェイ、およびファイアウォール）がコンポーネント間のインタフェースを変えることなく、やり取りの様々なポイントで紹介されることを実現します。その結果、コミュニケーションの翻訳を助けたり、大規模な共有されたキャッシュを通してパフォーマンスを向上させたりします。RESTは、自己記述的になるようにメッセージを制限することで、中間的な処理を可能にします。リクエスト間の相互作用はステートレスです。標準的な方法とメディアタイプは、意味論を表現することと情報交換をすることに使われます。そして、レスポンスは、キャッシュ可能性を明確に示します。

コンポーネントが直接接続されるので、特定のアプリケーション動作のそれらの準備と機能は、パイプ＆フィルタスタイルと同様の特性を持っています。RESTのコンポーネントは双方向のストリームで交信しますが、それぞれの方向の処理は独立しており、その結果、ストリームの変換器（フィルタ）に影響を受けやすいです。一般的なコネクタインタフェースは、コンポーネントがそれぞれのリクエストあるいはレスポンスの特性に基づいて、ストリームに配置されることを実現します。

サービスは、仲介役の複雑な階層構造を使って、複数の分散された発信元サーバで実装されるかもしれません。RESTのステートレス性は、総合的なコンポーネント接続形態を意識する必要性と、インターネット・スケールアーキテクチャのために不可能なタスクを取り除き、それぞれの相互作用が他から独立することを実現します。コンポーネントが、それぞれの目的地か仲介役のどちらかとして機能するのをリクエスト対象によって動的に決定することを許容します。コネクタは、パフォーマンス上の理由で他のコンポーネントの存在と能力をキャッシュするかもしれませんが、それらのコミュニケーションのスコープの間だけお互いの存在を意識すれば済みます。

5.3.2 コネクタビュー

アーキテクチャのコネクタビューは、コンポーネント間のコミュニケーション構造に力を入れます。RESTベースのアーキテクチャでは、一般的なリソースインタフェースを定義する制約が、特に興味深いです。

クライアントコネクタは、各リクエストに適切なコミュニケーションメカニズムを選択するために、リソース識別子を調べます。例えば、クライアントは、おそらくある物が注釈フィルタとして機能して、識別子がそれをローカルリソースであると示すとき、特定のプロキシコンポーネントへ接続するために構成されるかもしれません。同様に、識別子の何らかの部分集合へのリクエストを拒絶するようにも、クライアントを構成できます。

RESTはコミュニケーションを特定のプロトコルに制限しませんが、コンポーネントの間のインタフェースと、コンポーネントの間で行われ得る相互作用と実装の前提の範囲を制約します。例えば、Webのプライマリ転送プロトコルはHTTPですが、アーキテクチャはネットワークサーバを先在させると発生するリソースへのシームレスなアクセス――FTP［107］、Gopher［7］、WAIS［36］など――を含んでいます。それらのサービスとの相互作用は、RESTコネクタの意味論に制限されます。この制約は、コネクタ意味論のための一般的なインタフェースという単独のメリットを維持するために、例えばWAISのような関連フィードバックプロトコルのステートフルな相互作用といった他のアーキテクチャのメリットのいくつかを犠牲にします。代わりに、一般的なインタフェースによって、単独プロキシを通して数多くのサービスにアクセスすることを可能にします。アプリケーションが別のアーキテクチャの追加機能を必要とする場合、Webアーキテクチャが”telnet”と"mailto"リソースに連結する方法と同様に、並行に実行する別々のシステムとしてそれらの能力を実装して、呼び出すことができます。
