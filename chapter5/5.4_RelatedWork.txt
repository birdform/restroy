5.4 関連事項

Bass、他［9］は、WWWのためのアーキテクチャについて章を割きましたが、彼らの記述が包含するのは、libwww（クライアント・サーバライブラリ）で開発されたCERN/W3CとJigsawソフトウェアの中でのアーキテクチャの実装だけです。それらの実装はWebのアーキテクチャデザインと原理に詳しい人々によって開発され、RESTの設計制約の多くを反映しますが、本当のWWWアーキテクチャは、どのような個別の実装からも独立しています。現代のウェブは、それらのインタフェースとプロトコルが特定のソフトウェアの断片でどう実装されるかではなく、その標準インタフェースとプロトコルによって定義されます。

RESTスタイルは、多くの既存の分散プロセスパラダイム［6，50］、通信プロトコル、およびソフトウェア分野から描かれます。RESTコンポーネントの相互作用は、多層のクライアント・サーバスタイルで構築されますが、標準的なリソースインタフェースの追加された制約は、仲介者による代替可能性と点検のための機会を生みます。リクエストとレスポンスにはリモート呼出しスタイルの外観がありますが、RESTメッセージは、実装した識別子よりもむしろ概念的なリソースをターゲットにします。

いくつかの試みが、分散ファイルシステム（たとえば、WebNFS）、あるいは、分散オブジェクトシステム［83］の形でWebアーキテクチャをモデル化しました。しかしながら、それらは「面白くない」として、実際にそれらの存在がそのようなモデルの基礎となる仮定を無効にする時、様々なWebリソースタイプ、または、実装戦略を排除します。RESTは、各アプリケーションがそれ自身のニーズに最も合う実装を選ぶことを許容し、ユーザに影響を与えずに実装を交換可能にするというように、リソースの実装を所定のモデルに制限しないため、うまく機能します。

コンポーネントを消費するのにリソースの表現を送信する相互作用メソッドは、イベントベースの統合（EBI）スタイルと似たところがあります。重要な違いは、EBIスタイルがプッシュベースであるということです。（RESTの発信元サーバに相当する）状態を持つコンポーネントは、状態が変化する時は常に、どのコンポーネントがそのようなイベントに実際に関心があるか、またはリッスンしようとするかにかかわらず、イベントを発行します。RESTスタイルでは、通常、コンポーネントを消費することが表現を引き寄せます。単独のリソースを監視したい単独のクライアントでは、これはそれほど効率的ではありませんが、Webのスケールでは無制限なプッシュモデルは実行不可能になります。

コンポーネント、コネクタ、および表現の明確な概念を持つ、WebにおけるRESTスタイルの原理に基づいた使用は、C2アーキテクチャスタイル［128］と密接に関係します。C2スタイルは、基盤の独立を得るためのコネクタ使用の構造化に焦点を合わせることによって、分散された動的なアプリケーションの開発をサポートします。C2アプリケーションは、状態変更とリクエストメッセージの非同期な通知に依存します。他のイベントベースのスキーマのように、C2アーキテクチャは、リクエストを受け取り次第、通知を発するというRESTのプルスタイルで動作でき、名目上はプッシュベースです。しかしながら、C2スタイルは、一般的なリソースインタフェースや、保証されたステートレスな相互作用、内部でのキャッシュのサポートなどのような、RESTの仲介者にフレンドリーな制約を欠いています。
